#!/usr/bin/env python3
"""JACK client that is a UI for the boocli looper.

All MIDI events are passed through.
Two additional events are created for each NoteOn and NoteOff event.

"""
import jack
import struct
import binascii
from pynput import keyboard


# controls of pads
ledtext = "\u2551 \u2551      \u2551 | | | | | | | \u2551 | | | | | | | \u2551 | | | | | | | \u2551 | | | | | | | \u2551"
led = list (ledtext)

PURPLE = '\033[95m'
CYAN = '\033[96m'
DARKCYAN = '\033[36m'
BLUE = '\033[94m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
END = '\033[0m'

keys =     (38,233,34,39,40,45,232,95,
            97,122,101,114,116,121,117,105,
            113,115,100,102,103,104,106,107,
            119,120,99,118,98,110,44,59,
            32)

pads=      ((0x90, 0x00, 0x7F),(0x90, 0x01, 0x7F),(0x90, 0x02, 0x7F),(0x90, 0x03, 0x7F),(0x90, 0x04, 0x7F),(0x90, 0x05, 0x7F),(0x90, 0x06, 0x7F),(0x90, 0x07, 0x7F), 
            (0x90, 0x10, 0x7F),(0x90, 0x11, 0x7F),(0x90, 0x12, 0x7F),(0x90, 0x13, 0x7F),(0x90, 0x14, 0x7F),(0x90, 0x15, 0x7F),(0x90, 0x16, 0x7F),(0x90, 0x17, 0x7F),
            (0x90, 0x20, 0x7F),(0x90, 0x21, 0x7F),(0x90, 0x22, 0x7F),(0x90, 0x23, 0x7F),(0x90, 0x24, 0x7F),(0x90, 0x25, 0x7F),(0x90, 0x26, 0x7F),(0x90, 0x27, 0x7F),
            (0x90, 0x30, 0x7F),(0x90, 0x31, 0x7F),(0x90, 0x32, 0x7F),(0x90, 0x33, 0x7F),(0x90, 0x34, 0x7F),(0x90, 0x35, 0x7F),(0x90, 0x36, 0x7F),(0x90, 0x37, 0x7F),
            (0x90, 0x50, 0x7F))
            
led_on=    ((0x90, 0x00, 0x7F),(0x90, 0x01, 0x7F),(0x90, 0x02, 0x7F),(0x90, 0x03, 0x7F),(0x90, 0x04, 0x7F),(0x90, 0x05, 0x7F),(0x90, 0x06, 0x7F),(0x90, 0x07, 0x7F), 
            (0x90, 0x10, 0x7F),(0x90, 0x11, 0x7F),(0x90, 0x12, 0x7F),(0x90, 0x13, 0x7F),(0x90, 0x14, 0x7F),(0x90, 0x15, 0x7F),(0x90, 0x16, 0x7F),(0x90, 0x17, 0x7F),
            (0x90, 0x20, 0x7F),(0x90, 0x21, 0x7F),(0x90, 0x22, 0x7F),(0x90, 0x23, 0x7F),(0x90, 0x24, 0x7F),(0x90, 0x25, 0x7F),(0x90, 0x26, 0x7F),(0x90, 0x27, 0x7F),
            (0x90, 0x30, 0x7F),(0x90, 0x31, 0x7F),(0x90, 0x32, 0x7F),(0x90, 0x33, 0x7F),(0x90, 0x34, 0x7F),(0x90, 0x35, 0x7F),(0x90, 0x36, 0x7F),(0x90, 0x37, 0x7F),
            (0x90, 0x50, 0x7F))
            
led_pon=   ((0x90, 0x00, 0x3F),(0x90, 0x01, 0x3F),(0x90, 0x02, 0x3F),(0x90, 0x03, 0x3F),(0x90, 0x04, 0x3F),(0x90, 0x05, 0x3F),(0x90, 0x06, 0x3F),(0x90, 0x07, 0x3F), 
            (0x90, 0x10, 0x3F),(0x90, 0x11, 0x3F),(0x90, 0x12, 0x3F),(0x90, 0x13, 0x3F),(0x90, 0x14, 0x3F),(0x90, 0x15, 0x3F),(0x90, 0x16, 0x3F),(0x90, 0x17, 0x3F),
            (0x90, 0x20, 0x3F),(0x90, 0x21, 0x3F),(0x90, 0x22, 0x3F),(0x90, 0x23, 0x3F),(0x90, 0x24, 0x3F),(0x90, 0x25, 0x3F),(0x90, 0x26, 0x3F),(0x90, 0x27, 0x3F),
            (0x90, 0x30, 0x3F),(0x90, 0x31, 0x3F),(0x90, 0x32, 0x3F),(0x90, 0x33, 0x3F),(0x90, 0x34, 0x3F),(0x90, 0x35, 0x3F),(0x90, 0x36, 0x3F),(0x90, 0x37, 0x3F),
            (0x90, 0x50, 0x3F))
            
led_off=   ((0x90, 0x00, 0x00),(0x90, 0x01, 0x00),(0x90, 0x02, 0x00),(0x90, 0x03, 0x00),(0x90, 0x04, 0x00),(0x90, 0x05, 0x00),(0x90, 0x06, 0x00),(0x90, 0x07, 0x00), 
            (0x90, 0x10, 0x00),(0x90, 0x11, 0x00),(0x90, 0x12, 0x00),(0x90, 0x13, 0x00),(0x90, 0x14, 0x00),(0x90, 0x15, 0x00),(0x90, 0x16, 0x00),(0x90, 0x17, 0x00),
            (0x90, 0x20, 0x00),(0x90, 0x21, 0x00),(0x90, 0x22, 0x00),(0x90, 0x23, 0x00),(0x90, 0x24, 0x00),(0x90, 0x25, 0x00),(0x90, 0x26, 0x00),(0x90, 0x27, 0x00),
            (0x90, 0x30, 0x00),(0x90, 0x31, 0x00),(0x90, 0x32, 0x00),(0x90, 0x33, 0x00),(0x90, 0x34, 0x00),(0x90, 0x35, 0x00),(0x90, 0x36, 0x00),(0x90, 0x37, 0x00),
            (0x90, 0x50, 0x00))

color_off = ' '
color_pon = GREEN + '\u2588' + END
color_on = RED + '\u2588' + END


def on_press(key):
    global key_pressed
    try:
        #print('Alphanumeric key pressed: {0} '.format(key.char))
        key_pressed = ord (key.char)
#        print (key_pressed)
    except AttributeError:
        print('special key pressed: {0}'.format(key))

def on_release(key):
#    print('Key released: {0}'.format(key))
    if key == keyboard.Key.esc:
        # Stop listener
        return False

# start
key_pressed = 0
client = jack.Client('boocliUI')
inport = client.midi_inports.register('input')
outport = client.midi_outports.register('output')

@client.set_process_callback
def process(frames):
    global key_pressed
    global led
    paint = False

    outport.clear_buffer()

    for offset, indata in inport.incoming_midi_events():
        # Note: This may raise an exception:
        var = struct.unpack('3B', indata)

        try:
            idx = led_on.index (var)
            if (idx == 32):
                idx = 1
            else:
                idx = (idx *2) + 10
            led [idx] = color_on
            paint = True
        except ValueError:
            pass
        try:
            idx = led_pon.index (var)
            if (idx == 32):
                idx = 1
            else:
                idx = (idx *2) + 10
            led [idx] = color_pon
            paint = True
        except ValueError:
            pass
        try:
            idx = led_off.index (var)
            if (idx == 32):
                idx = 1
            else:
                idx = (idx *2) + 10
            led [idx] = color_off
            paint = True
        except ValueError:
            pass

    if paint:
        print ('\r' + "".join(led) + "     ", end='')

    if key_pressed != 0:
        try:
            idx = keys.index (key_pressed)
            key_pressed = 0
            try:
                outport.write_midi_event(0, pads[idx])
            except JackError:
                print ("Jack error\n")
        except ValueError:
            print ("unknown key pressed\n")
            key_pressed = 0



with client:
    # Collect events until released
    listener = keyboard.Listener(on_press=on_press, on_release=on_release)
    listener.start()
    input ()
  